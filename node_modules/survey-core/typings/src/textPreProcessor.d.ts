import { ITextProcessor, ITextProcessorProp, ITextProcessorResult } from "./base-interfaces";
import { IObjectValueContext } from "./conditionProcessValue";
export declare class TextPreProcessorItem {
    start: number;
    end: number;
}
export declare class TextPreProcessorValue {
    name: string;
    returnDisplayValue: boolean;
    constructor(name: string, returnDisplayValue: boolean);
    value: any;
    isExists: boolean;
}
export declare class TextPreProcessor {
    private _unObservableValues;
    private get hasAllValuesOnLastRunValue();
    private set hasAllValuesOnLastRunValue(value);
    onProcess: (textValue: TextPreProcessorValue) => void;
    process(text: string, returnDisplayValue?: boolean, doEncoding?: boolean, replaceUndefinedValues?: boolean): string;
    processValue(name: string, returnDisplayValue: boolean): TextPreProcessorValue;
    get hasAllValuesOnLastRun(): boolean;
    processText(text: string, returnDisplayValue: boolean): string;
    processTextEx(params: ITextProcessorProp): ITextProcessorResult;
    private getItems;
    private isValidItemName;
    private getName;
}
export declare class TextContextProcessor implements ITextProcessor {
    private obj;
    private textPreProcessor;
    constructor(obj: IObjectValueContext);
    processText(text: string, returnDisplayValue: boolean): string;
    processTextEx(params: ITextProcessorProp): ITextProcessorResult;
    private get survey();
    private getProcessedTextValue;
}
